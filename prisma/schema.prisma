generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId         String           @id @default(uuid())
  firstName      String           @default("")
  middleName     String           @default("")
  lastName       String           @default("")
  email          String           @unique @default("")
  address1       String           @default("")
  phoneNumber    String           @default("")
  country        String           @default("")
  city           String           @default("")
  avatar         String           @default("/profile.jpg")
  password       String           @default("")
  ssn            String           @default("")
  dateOfBirth    String           @default("")
  postalCode     String           @default("")
  initialDeposit String           @default("25.00")
  role           Role             @default(CLIENT)
  banks          Banks[]
  accounts       Accounts[]
  loans          Loans[]
  notifications  Notifications[]
  transactions   Transactions[]
  preferences    UserPreferences? // Optional relation with UserPreferences
  createdAt      DateTime         @default(now())
}

model UserPreferences {
  preferenceId       String  @id @default(uuid())
  twoFactorEnabled   Boolean @default(false)
  loginNotifications Boolean @default(false)
  marketingEmails    Boolean @default(false)
  transactionAlerts  Boolean @default(false)
  securityAlerts     Boolean @default(false)
  balanceAlerts      Boolean @default(false)
  promotionalAlerts  Boolean @default(false)
  userId             String  @unique
  user               User    @relation(fields: [userId], references: [userId])
}

enum Role {
  CLIENT
  ADMIN
}

model Banks {
  id               String @id @default(uuid())
  accountId        String @unique
  bankId           String
  accessToken      String
  fundingSourceUrl String
  shareableId      String
  userId           String
  user             User   @relation(fields: [userId], references: [userId])
}

model Accounts {
  id               String      @id @default(uuid())
  accountNumber    String?     @unique
  routingNumber    String?
  iban             String?
  switftBIC        String?
  availableBalance Float       @default(500.00)
  currentBalance   Float       @default(500.00)
  mask             String
  name             String
  officialName     String
  accountType      AccountType @default(CHECKING)
  userId           String
  plaidAccountId   String?
  updatedAt        DateTime    @default(now())
  user             User        @relation(fields: [userId], references: [userId])
}

enum AccountType {
  CHECKING
  SAVING
  LOAN
}

model Loans {
  loanId         String     @id @default(uuid())
  amount         Float
  loanTerm       Int
  interestRate   Float
  loanPayments   Float
  status         LoanStatus @default(ACTIVE)
  nextPaymentDue DateTime
  userId         String
  user           User?      @relation(fields: [userId], references: [userId])
}

enum LoanStatus {
  ACTIVE
  COMPLETED
  DEFAULTED
}

model Transactions {
  transactionId      String          @id @default(uuid())
  userId             String
  description        String
  transactionType    TransactionType @default(PAYMENT)
  accountId          String
  balanceAfter       Float
  amount             Float
  pending            Boolean         @default(false)
  category           String
  date               DateTime        @default(now())
  image              String?
  createdAt          DateTime        @default(now())
  channel            String?
  senderBankId       String?
  receiverBankId     String?
  plaidTransactionId String?
  user               User            @relation(fields: [userId], references: [userId])
}

enum TransactionType {
  WITHDRAW
  DEPOSIT
  PAYMENT
  TRANSFER
}

model Notifications {
  id        String   @id @default(uuid())
  userId    String
  type      String
  event     String
  message   String
  icon      String
  iconBg    String?
  iconColor String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [userId])
}
